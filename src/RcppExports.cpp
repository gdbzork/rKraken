// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// minion
DataFrame minion(CharacterVector filename);
RcppExport SEXP _rKraken_minion(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(minion(filename));
    return rcpp_result_gen;
END_RCPP
}
// reaper
DataFrame reaper(CharacterVector filename);
RcppExport SEXP _rKraken_reaper(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(reaper(filename));
    return rcpp_result_gen;
END_RCPP
}
// tally
DataFrame tally(CharacterVector filename);
RcppExport SEXP _rKraken_tally(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(tally(filename));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rKraken_minion", (DL_FUNC) &_rKraken_minion, 1},
    {"_rKraken_reaper", (DL_FUNC) &_rKraken_reaper, 1},
    {"_rKraken_tally", (DL_FUNC) &_rKraken_tally, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rKraken(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
